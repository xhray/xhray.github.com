<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>xhray's blog</title>
 <link href="http://xhray.github.io/" rel="self"/>
 <link href="http://xhray.github.io"/>
 <updated>2014-08-13T10:59:49+08:00</updated>
 <id>http://xhray.github.io</id>
 <author>
   <name>ray tan</name>
   <email>rayfuture@gmail.com</email>
 </author>

 
 <entry>
   <title>CocoaPods - 起步</title>
   <link href="http://xhray.github.io/ios/2014/08/11/cocoapods---get-start"/>
   <updated>2014-08-11T00:00:00+08:00</updated>
   <id>http://xhray.github.io/ios/2014/08/11/cocoapods---get-start</id>
   <content type="html">
&lt;h2 id=&quot;cocoapods&quot;&gt;安装CocoaPods&lt;/h2&gt;

&lt;p&gt;CocoaPods运行在Ruby，mac一般都会装有。所以，你只需要做的是更新RubyGems。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo gem update --system
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行命令后，会在终端看到类似下面的输出：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn2.raywenderlich.com/wp-content/uploads/2014/03/TerminalOutput.png&quot; alt=&quot;TerminalOutput&quot; /&gt;	&lt;/p&gt;

&lt;p&gt;执行下面的命令安装CocoaPods:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo gem install cocoapods
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装过程中终端可能会弹出一下需要你确认的信息：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rake&#39;s executable &quot;rake&quot; conflicts with /usr/bin/rake
Overwrite the executable? [yN]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果是，直接输入y确认。&lt;/p&gt;

&lt;p&gt;最后，输入以下命令完成CocoaPods安装(这个命令将&lt;a href=&quot;https://github.com/CocoaPods/Specs&quot;&gt;CocoaPods Specs repository&lt;/a&gt; clone到本机的~/.cocoapods/目录下)：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod setup
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;cocoapods-1&quot;&gt;CocoaPods使用&lt;/h2&gt;

&lt;p&gt;在终端中进入项目所在目录，然后执行以下命令为项目创建默认的Podfile。你需要在Podfile中声明本项目的依赖项。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod init	
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行以下命令，可以使用Xcode打开Podfile进行编辑：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;open -a Xcode Podfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;不要使用TextEdit进行编辑，TextEdit会替换标准的引号，导致CocoaPods出错&lt;/em&gt;&lt;/strong&gt;	&lt;/p&gt;

&lt;p&gt;初始时，Podfile的内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Uncomment this line to define a global platform for your project
# platform :ios, &quot;6.0&quot;
 
target &quot;ShowTracker&quot; do
 
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将&lt;strong&gt;&lt;em&gt;# platform :ios, “6.0”&lt;/em&gt;&lt;/strong&gt;修改为：&lt;strong&gt;&lt;em&gt;platform :ios, “7.0”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个语句告诉CocoaPods，本项目基于iOS7.&lt;/p&gt;

&lt;p&gt;接着，向Podfile增加依赖项目：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod &#39;AFNetworking&#39;, &#39;2.2.1&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存并退出编辑。&lt;/p&gt;

&lt;p&gt;执行安装依赖项目的命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装成功后，使用&lt;strong&gt;&lt;em&gt;[project].xcworkspace&lt;/em&gt;&lt;/strong&gt;打开项目&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;管理私有库&lt;/h2&gt;

&lt;p&gt;首先，为需要管理的库创建新的git repository，并打上Tag，如v0.0.1&lt;/p&gt;

&lt;p&gt;然后，新建一个用来配置作者等信息的[project].podspec文件:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Pod::Spec.new do |s|
	s.name = &#39;[ProjectName]&#39;
	s.version = &#39;0.0.1&#39;
	s.license = &#39;MIT&#39;
	s.summary = &#39;[summary]&#39;
	s.homepage = &#39;http://www.xxx.com&#39;
	s.description = &#39;[s.description]&#39;
	s.author = {&#39;Dandan Huang&#39; =&amp;gt; &#39;f@itiger.me&#39; }
	s.source = { :git =&amp;gt; &#39;https://github.com/[username]/[repository].git&#39;, :tag =&amp;gt; &#39;0.0.1&#39; }
	s.platform = :ios,&#39;5.0&#39;
	s.source_files = &#39;src&#39;
	s.frameworks = &#39;SomeFramework&#39;,&#39;AnotherFramework&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;s.source指定代码库地址， s.source_files指定所需文件的所在的文件夹，s.frameworks指定需要用到的framework。&lt;/p&gt;

&lt;p&gt;接着，编辑开发项目中的Podfile，添加：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod &#39;[project]&#39;, :local =&amp;gt; &#39;~/[path]/[project].podspec&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或使用podspec放在gist上：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod &#39;[project]&#39;, :podspec =&amp;gt; &#39;https://xxx.github.com/gist/....&#39;	  最后，使用：

pod update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;需要注意：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;s.name需要和本podspec文件的名称一致，区分大小写&lt;/li&gt;
  &lt;li&gt;可以在git上打tag，在podspec文件上指定:tag。这样可以保证repo对外保持稳定，不受开发状态影响。&lt;/li&gt;
  &lt;li&gt;可以根据功能/模块对podspec进行分块(subspec)，这样其他人可以选择安装lib的一个/多个子集。在Podfile中，&lt;code&gt;pod &#39;CommonLib&#39;&lt;/code&gt;安装整个CommonLib。如只需要其中的UI模块，可以使用 &lt;code&gt;pod &#39;CommonLib/UI&#39;&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个完整的podspec例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Pod::Spec.new do |s|
	s.name         = &quot;CommonLib&quot;
	s.version      = &quot;0.0.1&quot;
	s.summary      = &quot;common lib for ios team.&quot;
	
	s.description  = &amp;lt;&amp;lt;-DESC
                 commonlib for ios development, includes UI components, UIHelper, NetworkHelper, etc.
               DESC
               
	s.homepage     = &quot;http://[host]/ios-project-libs/commonlib&quot;
    
	s.license      = &quot;MIT&quot;
	s.authors      = { &quot;author_name&quot; =&amp;gt; &quot;email&quot; }		s.platform     = :ios, &#39;6.0&#39;
	s.source       = { :git =&amp;gt; &quot;http://[host]/ios-project-libs/commonlib.git&quot;, :tag =&amp;gt; &quot;v0.0.1&quot; }
    
	s.resources = &quot;CommonLib/Resource/Localization&quot;, &quot;CommonLib/Resource/Images&quot;

	s.dependency &quot;AFNetworking&quot;, &quot;~&amp;gt; 2.3.1&quot;
	s.dependency &quot;AFNetworking-MUResponseSerializer&quot;, &quot;0.9.9&quot;
	s.dependency &quot;Masonry&quot;, &quot;~&amp;gt; 0.5.2&quot;

	s.requires_arc = true

	s.prefix_header_contents = &amp;lt;&amp;lt;-EOS
                          #ifdef __OBJC__
                            #import &amp;lt;Foundation/Foundation.h&amp;gt;

                            #define MAS_SHORTHAND
                            #import &quot;Masonry.h&quot;
 				 
                            #import &quot;AFNetworking.h&quot;
                            #import &quot;MUResponseSerializer.h&quot;
		 
                          #endif

                        EOS

	s.subspec &quot;Models&quot; do |ss|

		ss.source_files = &quot;CommonLib/Models&quot;, &quot;CommonLib/Models/**/*.{h,m}&quot;

	end
  
	s.subspec &quot;Utils&quot; do |ss|

		ss.dependency &quot;CommonLib/Models&quot;
		ss.source_files = &quot;CommonLib/Common&quot;, &quot;CommonLib/Common/**/*.{h,m}&quot;

	end

	s.subspec &quot;Library&quot; do |ss|

		ss.source_files = &quot;CommonLib/Library&quot;, &quot;CommonLib/Library/**/*.{h,m}&quot;

	end

	s.subspec &quot;UI&quot; do |ss|

		ss.dependency &quot;CommonLib/Utils&quot;
		ss.dependency &quot;CommonLib/Library&quot;

		ss.prefix_header_contents = &amp;lt;&amp;lt;-EOS
                             		  #import &quot;GMDebugHeader.h&quot;
                            		 EOS

		ss.exclude_files = &quot;CommonLib/Views/UITest.{h,m}&quot;

		ss.source_files = &quot;CommonLib/Views&quot;, &quot;CommonLib/Views/**/*.{h,m}&quot;

	end

end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改podspec文件后，可以执行以下命令校验：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod spec lint
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在搭建私有公共库时（可以在podfile中，以这样的形式使用：&lt;code&gt;pod &#39;CommonLib&#39;, &#39;~&amp;gt; 0.0.1&#39;&lt;/code&gt;），还需要另外搭建私有的repo，并将项目的podspec文件上传到repo。&lt;/p&gt;

&lt;p&gt;私有repo搭建完成后，客户端需要在本机配置相应的repo（~/.cocoapods/）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod repo add repo_name http://[host]/specs.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每次执行 &lt;code&gt;pod install --no-repo-update&lt;/code&gt;或 &lt;code&gt;pod update --no-repo-update&lt;/code&gt;时，需要更新一下本地的repo（当私有repo有更新时）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pod repo update repo_name 	
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;reference:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://guides.cocoapods.org&quot;&gt;CocoaPods Guides&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.raywenderlich.com/64546/introduction-to-cocoapods-2&quot;&gt;Introduction to CocoaPods Tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.itiger.me/?p=74&quot;&gt;使用CocoaPods管理私有库&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/AFNetworking/AFNetworking/blob/master/AFNetworking.podspec&quot;&gt;AFNetworking podspec&lt;/a&gt;		&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>什么是引用循环（retain cycle）？</title>
   <link href="http://xhray.github.io/ios/2014/08/05/what-is-a-retain-cycle"/>
   <updated>2014-08-05T00:00:00+08:00</updated>
   <id>http://xhray.github.io/ios/2014/08/05/what-is-a-retain-cycle</id>
   <content type="html">
&lt;p&gt;引用循环（retain cycle）会发生在像Objective-C这样的基于引用计数（retain count）内存管理技术的语言中。当对象被创建时，其引用计数为1。当其它对象引用它时，引用计数增加；当其它对象释放它时，引用计数减少。当对象的引用计数为0时，运行时（runtime）会将其释放（deallocate），这时对象的dealloc方法被调用。&lt;/p&gt;

&lt;p&gt;假设有两个对象A和B，A创建并引用B。创建A的对象会负责释放A，假设A的dealloc方法会release B，当B的引用计数为0时，B被释放。为简单起见，假设没有其它额外的对象引用A或B。&lt;/p&gt;

&lt;p&gt;但如果B需要引用A，增加A的引用计数时会怎样？创建A的对象会释放A，但是B现在也引用A，A的引用计数不为0。另一方面，A引用B，因此B的引用计数也不为0，A和B都不会被释放。B的dealloc方法不会被调用，因此计算B在其dealloc方法调用A的release方法也没有作用。&lt;/p&gt;

&lt;p&gt;在此情况下，就发生了内存泄漏（memory leak）：没有其它对A或B的引用，但A和B都没有被释放。如果A和B正在做任何消耗cpu的东西，应用也会发生leaking CPU time。&lt;/p&gt;

&lt;p&gt;reference: &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.quora.com/What-is-a-retain-cycle&quot;&gt;What is a retain cycle?&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>iOS SDK相关问题</title>
   <link href="http://xhray.github.io/ios/2014/08/03/ios-sdk-related-problems"/>
   <updated>2014-08-03T00:00:00+08:00</updated>
   <id>http://xhray.github.io/ios/2014/08/03/ios-sdk-related-problems</id>
   <content type="html">
&lt;h2 id=&quot;loadviewviewdidload&quot;&gt;loadView和viewDidLoad的不同之处?&lt;/h2&gt;

&lt;blockquote&gt;

  &lt;p&gt;不要在loadView里读取self.view。只设置，不读取！&lt;/p&gt;

  &lt;p&gt;读取self.view的时，若view没有被加载，get方法会调用loadView方法。若在loadView方法里读取self.view，会造成循环调用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;

  &lt;p&gt;通常情况下，会在loadView中构建视图，如：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;UIView *view = [UIView alloc] init...];
...
[view addSubview:whatever];
[view addSubView:whatever2];
...
self.view = view;
[view release];
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;

  &lt;p&gt;UIViewController在loadView方法中加载view并将其赋给属性“view”的方法。当从UIViewController派生子类时，可以重写loadView方法设置view属性。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;

  &lt;p&gt;当view加载完成时，viewDidLoad会被调用。viewDidLoad在loadView之后被调用，在这里可以进一步控制view的设置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;reference: &lt;a href=&quot;http://stackoverflow.com/a/574291&quot;&gt;iPhone SDK: what is the difference between loadView and viewDidLoad?&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;ios6viewdidunloadviewwillunload&quot;&gt;iOS6，viewDidUnload、viewWillUnload过期&lt;/h2&gt;

&lt;p&gt;苹果官方文档提到：&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;这个方法在controller的view被释放时调用。在iOS6中，viewDidUnload被抛弃。在low-memory的情况下，views不会被清除。因此这个方法不会被调用。(Deprecated in iOS6.0. Views are no longer purged under low-memory conditions and so this method is never called.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;从iOS6开始，没有必要controller对view或其它对象的引用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;可以在ViewController的didReceiveMemoryWarning方法中设置view或其它组件为nil。可以覆盖该方法来释放被view controller使用的任何多余的内存。但app中不应该调用这个方法，当系统检测到内存紧张时，会自动调用该方法。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;在重写didReceiveMemoryWarning时，最好的做法时不要释放任何view对象，只释放那些不再需要的个人数据(custom data)。至于view对象，就让view controller的父类来处理。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;add-subviews-viewdidappear-viewdidload-viewwillappear&quot;&gt;在哪里add subviews: ViewDidAppear? ViewDidLoad? ViewWillAppear?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;viewDidLoad - 当需要控制子view跟随view一同呈现时，需要将添加子view这个动作放到ViewDidLoad方法。该方法在view加载到内存时被调用。比如：假设view是一个包含3个label的form，那么就将增加label到view上这个动作放到ViewDidLoad。&lt;/li&gt;
  &lt;li&gt;viewWillAppear － 通常用来更新数据。继续上面的例子，通过在这个方法中加载服务器数据到form上。创建UIView属于较为消耗大的操作，应该尽量避免在ViewWillAppepear进行这个操作。当这个方法被调用时，意味着设备已经准备好将UIView呈现给用户，在这里进行任何消耗大的操作会影响性能，并且用户能切实感受到（比如动画延时）。&lt;/li&gt;
  &lt;li&gt;viewDidAppear － 在这个方法中，开启新的线程去执行那些执行时间长的事情。比如调用webservice为form获取额外的数据。幸好的是view已经准备好并呈现给用户，因此，在加载数据时，你可以向用户提示友好的“Waiting”信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;reference: &lt;a href=&quot;http://stackoverflow.com/a/2281560&quot;&gt;viewDidLoad, viewWillAppear, viewDidAppear&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;loadview&quot;&gt;何时重写loadView&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;当在view controller及其派生类中使用自定义root view时，就应该在loadView方法中创建view，并将其设置为view controller的view属性（注意不要调用super）。&lt;/li&gt;
  &lt;li&gt;在viewDidLoad方法中修改view controller’s view或为其添加subview&lt;/li&gt;
  &lt;li&gt;推荐的做法是在viewDidLoad中创建UILabel或UIWebView，并在viewDidUnload将它们释放，并将它们的引用变量设为nil。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;reference: &lt;a href=&quot;http://stackoverflow.com/a/2280642&quot;&gt;loadView&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;arcdeallocnil&quot;&gt;ARC模式下，是否需要在dealloc方法中设置属性为nil&lt;/h2&gt;

&lt;p&gt;就算在手动管理内存模式（MRR, manual memory management），也不应该在dealloc中设置property为nil。&lt;/p&gt;

&lt;p&gt;在MRR模式下，你应该释放实例变量（ivars）。设置property为nil会调用set方法，而set方法可能包含不应该在dealloc方法执行的代码。也有可能会触发KVO notifications。释放ivar而不是property可以避免产生未预期的结果。&lt;/p&gt;

&lt;p&gt;在ARC模式下，系统会自动释放ivars。如果所做的只是这些，你甚至不需要实现dealloc方法。但如果代码包含分配缓冲区（buffers）等非对象（non-objects）ivars，你还是需要在dealloc方法中处理它们。&lt;/p&gt;

&lt;p&gt;进一步说，如果将自身设为其它对象的delegate，那么在dealloc方法中，你应该解除这种关系（代码如下：[obj setDelegate = nil]），但delegate属性为weak的情况除外。&lt;/p&gt;

&lt;p&gt;reference:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/a/7906891&quot;&gt;Do I set properties to nil in dealloc when using ARC&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;objective-c-class-extension&quot;&gt;Objective-C class extension&lt;/h2&gt;

&lt;p&gt;Q: 在class extension中定义私有方法和完全不声明私有方法之间的差异？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface Class()

- (void)bar;

@end


@implementation Class

- (void)foo
{
	[self bar];
}

- (void)bar
{
	NSLog(@&quot;bar&quot;)
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;和&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@implementaion Class

- (void)foo
{
	[self bar];
}

- (void)bar
{
	NSLog(@&quot;bar&quot;);
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A: 现在不需要声明私有方法。在不久前，私有方法需要预先声明，大多数人选择在class extension中声明。从Xcode 4.4开始，编译器已经有能力检测implementation中的私有方法，从而不需要在别处预先声明。&lt;/p&gt;

&lt;p&gt;Q: 在class extension中声明变量和implementation中的差异？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface Class()
{
	NSArray *mySortedArray;
}

@end

@implementation Class

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;和&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@implementation Class

NSArray *mySortedArray;

@end	
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A: 在class extension中声明的变量是类的实例变量，而在implementation中直接声明的变量是全局变量（遵循c的全局变量语义）！&lt;/p&gt;

&lt;p&gt;reference：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/a/14675389&quot;&gt;Objective-C class extension&lt;/a&gt;	&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>UIPickerView</title>
   <link href="http://xhray.github.io/ios/2014/07/31/uipickerview"/>
   <updated>2014-07-31T00:00:00+08:00</updated>
   <id>http://xhray.github.io/ios/2014/07/31/uipickerview</id>
   <content type="html">
&lt;h4 id=&quot;uipickerview&quot;&gt;调整UIPickerView高度&lt;/h4&gt;

&lt;p&gt;UIPickerView只允许3种高度(162.0, 180.0, 216.0)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UIDatePicker也只允许这3种高度&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;在程序中允许设置UIPickerView的frame，但frame的height小于162，或大于216时，系统会在控制台上输出：&lt;/p&gt;

  &lt;p&gt;Invalid height value 300.0 pinned to 216.0.&lt;/p&gt;

  &lt;p&gt;Invalid height value 66.0 pinned to 162.0.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;参考资料：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/573979/how-to-change-uipickerview-height&quot;&gt;How to change UIPickerView height&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>iOS：使用UIEdgeInsetsMake制作可伸缩按钮</title>
   <link href="http://xhray.github.io/ios/2014/07/31/make-stretchable-button-with-uiedgeinsetsmake"/>
   <updated>2014-07-31T00:00:00+08:00</updated>
   <id>http://xhray.github.io/ios/2014/07/31/make-stretchable-button-with-uiedgeinsetsmake</id>
   <content type="html">
&lt;p&gt;在一个iOS app里，通常会使用很多的button。而这些button有同样的背景色（backgroud）但在不同的屏幕上有不同的大小（即使在iOS7上，button没有背景）。举个例子，Save button会比Submit button短，但它们都以紫色为背景色。&lt;/p&gt;

&lt;p&gt;在此情况下，你通常不想为button定义各种不同大小背景图片。幸运地，使用&lt;strong&gt;UIEdgeInsetsMake&lt;/strong&gt;方法可以非常容易地令一张这样的图片：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://natashatherobot.com/wp-content/uploads/purple_button@2x.png&quot; alt=&quot;origin image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;变成这样的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://natashatherobot.com/wp-content/uploads/Screen-Shot-2013-10-24-at-6.32.55-AM.png&quot; alt=&quot;target image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个想法非常简单。原图的方形圆角按钮的边缘需要保留，但中间部分可以在横向/纵向两个方向进行复制，直到达到需要的大小。&lt;/p&gt;

&lt;p&gt;使用&lt;strong&gt;UIEdgeInsets&lt;/strong&gt;，并指定在拉伸图片时，top、left、bottom、right忽略的像素数可以达到此目的。&lt;strong&gt;UIEdgeInsets&lt;/strong&gt;是一个包含4个float类型字段（top、left、bottom、right）的结构体（struct）。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typedef struct {
	CGFload top, left, bottom, right;
} UIEdgeInsets;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section&quot;&gt;复制一切&lt;/h2&gt;

&lt;p&gt;现在我新建一个项目，在storyboard上添加一个自定义button，然后在ViewController上为那个button创建outlet。在ViewDidLoad:方法，我调用了私有的configureButton方法。该方法在最开始的时候将UIEdgeInsets初始为&lt;strong&gt;UIEdgeInsetsMake(0, 0, 0, 0)&lt;/strong&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)configureButton
{
	UIEdgeInsets edgeInsets = UIEdgeInsetsMake(0, 0, 0, 0);
	UIImage *backgroundButtonImage = [[UIImage imageNamed:@&quot;purple_button.png&quot;]
                                  resizableImageWithCapInsets:edgeInsets];
	[self.purpleButton setBackgroundImage:backgroundButtonImage
                             forState:UIControlStateNormal];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;随着整张图片不断被复制（在UIEdgeInsets没有设置忽略像素），最后生成的图片为：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://natashatherobot.com/wp-content/uploads/Screen-Shot-2013-10-24-at-6.47.11-AM.png&quot; alt=&quot;Screen-Shot-2013-10-24-at-6.47.11-AM&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;纵向拉伸&lt;/h2&gt;

&lt;p&gt;为了让图片纵向拉伸，我们需要忽略左边缘和右边缘，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://natashatherobot.com/wp-content/uploads/purple_button_vertically.png&quot; alt=&quot;purple_button_vertically&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在这些边缘之间的所有东西可以被复制。为达到这样的效果，我们需要忽略左/右各8各像素，设置UIEdgeInsets为UIedgeInsetsMake(0, 8, 0, 8)：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)configureButton
{
	UIEdgeInsets edgeInsets = UIEdgeInsetsMake(0, 8, 0, 8);
	UIImage *backgroundButtonImage = [[UIImage imageNamed:@&quot;purple_button.png&quot;]
                                  resizableImageWithCapInsets:edgeInsets];
	[self.purpleButton setBackgroundImage:backgroundButtonImage
                             forState:UIControlStateNormal];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在的效果看起来好多了！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://natashatherobot.com/wp-content/uploads/Screen-Shot-2013-10-24-at-6.53.42-AM.png&quot; alt=&quot;Screen-Shot-2013-10-24-at-6.53.42-AM&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;横向拉伸&lt;/h2&gt;

&lt;p&gt;类似地，如果需要将图片横向拉伸，只需要忽略图片上/下各8像素，将图片的中间部分复制：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://natashatherobot.com/wp-content/uploads/purple_button_horizontal-1.png&quot; alt=&quot;purple_button_horizontal-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以，如果只是横向拉伸，UIEdgeInsets被设置为UIEdgeInsetsMake(8, 0, 8, 0)，configureButton的方法如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)configureButton
{
	UIEdgeInsets edgeInsets = UIEdgeInsetsMake(8, 0, 8, 0);
	UIImage *backgroundButtonImage = [[UIImage imageNamed:@&quot;purple_button.png&quot;]
                                  resizableImageWithCapInsets:edgeInsets];
	[self.purpleButton setBackgroundImage:backgroundButtonImage
                             forState:UIControlStateNormal];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;类似上面得例子，图片可以横向拉伸，但纵向没有：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://natashatherobot.com/wp-content/uploads/Screen-Shot-2013-10-24-at-7.03.20-AM.png&quot; alt=&quot;Screen-Shot-2013-10-24-at-7.03.20-AM&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;双向拉伸&lt;/h2&gt;

&lt;p&gt;为了让图片同时在横向和纵向拉伸，我们需要忽略上/下、左/右8像素：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://natashatherobot.com/wp-content/uploads/purple_button_both-1.png&quot; alt=&quot;purple_button_both-1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们只需要简单地设置UIEdgeInsets为UIEdgeInsetsMake(8, 8, 8, 8)，在每个方向上忽略8像素：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)configureButton
{
	UIEdgeInsets edgeInsets = UIEdgeInsetsMake(8, 8, 8, 8);
	UIImage *backgroundButtonImage = [[UIImage imageNamed:@&quot;purple_button.png&quot;]
                                  resizableImageWithCapInsets:edgeInsets];
	[self.purpleButton setBackgroundImage:backgroundButtonImage
                             forState:UIControlStateNormal];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Voilà! 我们现在拥有一个非常好看地按钮：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://natashatherobot.com/wp-content/uploads/Screen-Shot-2013-10-24-at-6.32.55-AM.png&quot; alt=&quot;Screen-Shot-2013-10-24-at-6.32.55-AM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;无论什么时候，只要你需要一个紫色的按钮，你只需要一张小的方图，然后忽略其边角部分并将中间部分不断复制，就可以将原图改变成任意大小。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;原文链接&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://natashatherobot.com/ios-stretchable-button-uiedgeinsetsmake&quot;&gt;iOS: How To Make A Stretchable Button With UIEdgeInsetsMake&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>UIView</title>
   <link href="http://xhray.github.io/ios/2014/07/28/UIView"/>
   <updated>2014-07-28T00:00:00+08:00</updated>
   <id>http://xhray.github.io/ios/2014/07/28/UIView</id>
   <content type="html">
&lt;h2 id=&quot;layoutsubviews&quot;&gt;layoutSubviews&lt;/h2&gt;

&lt;p&gt;布局subviews&lt;/p&gt;

&lt;p&gt;- (void)layoutSubviews&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;概述&lt;/h3&gt;

&lt;p&gt;该方法的默认实现对于iOS 5.1及其之前的版本无效。否则，默认的实现方法会使用你设置的所有约束去确定所有subviews的size和position。&lt;/p&gt;

&lt;p&gt;在需要更精准地布局subviews的时候，派生类可以覆盖这个方法。只有在subviews的autoresizing和contraint-base behaviors不能提供你想要的行为时，你才应该去覆盖这个方法。你可以使用自身实现的方法去设置subviews的frame rectangles。&lt;/p&gt;

&lt;p&gt;你不应该直接调用该方法。如果想要强制更新布局，需要调用&lt;em&gt;setNeedsLayout&lt;/em&gt;方法来通知系统在下次绘图时更新布局。如果需要立即更新views，则需要调用&lt;em&gt;layoutIfNeeded&lt;/em&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在重写该方法时，可以获取view上将要显示的数据。因此，可以根据这些数据来对subviews进行更精细的布局，如控制文本的高度。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;drawrect&quot;&gt;drawRect:&lt;/h2&gt;

&lt;p&gt;在指定的矩形区域内绘制接收者的图片。&lt;/p&gt;

&lt;p&gt;- (void)drawRect:(CGRect)rect&lt;/p&gt;

</content>
 </entry>
 
 
</feed>